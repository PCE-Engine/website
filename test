---
const {chessclass} = Astro.props
---

<table class:list={[chessclass, "board"]} data-theme="default">
    <tbody>
        <tr>
            <th>8</th>
            <td><div class="br"></div></td>
            <td><div class="bn"></div></td>
            <td><div class="bb"></div></td>
            <td><div class="bq"></div></td>
            <td><div class="bk"></div></td>
            <td><div class="bb"></div></td>
            <td><div class="bn"></div></td>
            <td><div class="br"></div></td>
        </tr>
        <tr>
            <th>7</th>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
            <td><div class="bp"></div></td>
        </tr>
        <tr>
            <th>6</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th>5</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th>4</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th>3</th>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th>2</th>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
            <td><div class="wp"></div></td>
        </tr>
        <tr>
            <th>1</th>
            <td><div class="wr"></div></td>
            <td><div class="wn"></div></td>
            <td><div class="wb"></div></td>
            <td><div class="wq"></div></td>
            <td><div class="wk"></div></td>
            <td><div class="wb"></div></td>
            <td><div class="wn"></div></td>
            <td><div class="wr"></div></td>
        </tr>
        <tr>
            <th></th>
            <th>a</th>
            <th>b</th>
            <th>c</th>
            <th>d</th>
            <th>e</th>
            <th>f</th>
            <th>g</th>
            <th>h</th>
        </tr>
    </tbody>
</table>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

::selection {
    background: inherit;
    color: inherit;
}

:root {
    /* Default theme */
    --defaultthemew: #eee;
    --defaultthemeb: #5b5b68;

	/* Gotham theme*/
	--gothamthemew: #f0d9b5;
    --gothamthemeb: #b58863;
}

.board {
    border-spacing: 0;
    border-collapse: collapse;
    font-family: 'Roboto', sans-serif;
}
.board th {
    padding-right: 10px;
}

.board td div {
    width: 100%;
    height: 100%;
}    

.br, .bn, .bb, .bq, .bk, .bp, .wr, .wn, .wb, .wq, .wk, .wp {
    background-size: 100% 100%;
    cursor:grab;
}

.br { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/br.png'); }
.bn { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bn.png'); }
.bb { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bb.png'); }
.bq { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bq.png'); }
.bk { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bk.png'); }
.bp { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bp.png'); }

.wr { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wr.png'); }
.wn { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wn.png'); }
.wb { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wb.png'); }
.wq { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wq.png'); }
.wk { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wk.png'); }
.wp { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wp.png'); }

table[data-theme=default] tr:nth-child(even) td:nth-child(even), table[data-theme=default] tr:nth-child(odd) td:nth-child(odd) {
	background: var(--defaultthemeb);
	color: var(--defaultthemew);
}
table[data-theme=default] tr:nth-child(even) td:nth-child(odd), table[data-theme=default] tr:nth-child(odd) td:nth-child(even){
	background: var(--defaultthemew);
	color: var(--defaultthemeb);
}

table[data-theme=gotham] tr:nth-child(even) td:nth-child(even), table[data-theme=gotham] tr:nth-child(odd) td:nth-child(odd) {
	background: var(--gothamthemeb);
	color: var(--gothamthemew);
}
table[data-theme=gotham] tr:nth-child(even) td:nth-child(odd), table[data-theme=gotham] tr:nth-child(odd) td:nth-child(even){
	background: var(--gothamthemew);
	color: var(--gothamthemeb);
}
</style>
<script define:vars={{ chessclass }}>
    if (!window['chessboards'])
        window['chessboards'] = {};
    window['chessboards'][chessclass] = document.querySelector(`.${chessclass}`);

    // chessboard
    document.querySelector(`.${chessclass}`).chessboard = [];
    let chessboard = document.querySelector(`.${chessclass}`).chessboard;

    // u unit
    document.querySelector(`.${chessclass}`).u = (document.querySelector(`.${chessclass}`).parentElement.clientWidth - 25) / 18;
    let u = document.querySelector(`.${chessclass}`).u;

    document.querySelector(`.${chessclass}`).datas = { offsetX: 0, offsetY: 0, mouseX: 0, mouseY: 0, indexX: 0, indexY: 0, startX: 0, startY: 0, currentX: 0, currentY: 0, lastMoveX: -1, lastMoveY: -1, activePiece: null, markedPiece: null, warnCases: [], move: true }

    let offsetX = document.querySelector(`.${chessclass}`).datas.offsetX, offsetY = document.querySelector(`.${chessclass}`).datas.offsetY;
    let mouseX = document.querySelector(`.${chessclass}`).datas.mouseX, mouseY = document.querySelector(`.${chessclass}`).datas.mouseY;

    let indexX = document.querySelector(`.${chessclass}`).datas.indexX, indexY = document.querySelector(`.${chessclass}`).datas.indexY;

    let startX = document.querySelector(`.${chessclass}`).datas.startX, startY = document.querySelector(`.${chessclass}`).datas.startY;     // TO SEND AS START POS
    let currentX = document.querySelector(`.${chessclass}`).datas.currentX, currentY = document.querySelector(`.${chessclass}`).datas.currentY; // TO SEND AS FINAL POS

    let lastMoveX = document.querySelector(`.${chessclass}`).datas.lastMoveX, lastMoveY = document.querySelector(`.${chessclass}`).datas.lastMoveY;

    let activePiece = document.querySelector(`.${chessclass}`).datas.activePiece, markedPiece = document.querySelector(`.${chessclass}`).datas.markedPiece;

    let warnCases = document.querySelector(`.${chessclass}`).datas.warnCases;

    let move = document.querySelector(`.${chessclass}`).datas.move;

    function focusPiece(event) {
        let t = event.target;    
        let chessboardel;

        while (!t.classList.contains('board')) 
            t = t.parentElement;
        
        Object.assign([], t.classList).forEach(el => {
            if (el != 'board') {
                if (window['chessboards'][el]) {
                    window['activeboard'] = window['chessboards'][el];
                    chessboardel = window['chessboards'][el];
                }
            }
        })

        if (
        ((chessboardel.datas.move && (Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0))
        || 
        (!chessboardel.datas.move && !(Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0)))
        && event.which == 1
        ) {
            if (chessboardel.datas.markedPiece)
                chessboardel.datas.markedPiece.style.boxShadow =  '';

            chessboardel.datas.activePiece = event.target;

            chessboardel.datas.mouseX = event.clientX;
            chessboardel.datas.mouseY = event.clientY;

            chessboardel.datas.offsetX = event.offsetX;
            chessboardel.datas.offsetY = event.offsetY;

            chessboardel.datas.activePiece.style.position = 'fixed'
            chessboardel.datas.activePiece.style.left = `${event.clientX - u}px` 
            chessboardel.datas.activePiece.style.top =`${event.clientY - u}px`
            chessboardel.datas.activePiece.style.height = `${2 * u}px` 
            chessboardel.datas.activePiece.style.width = `${2 * u}px` 

            chessboardel.datas.markedPiece = event.target.parentElement;
            chessboardel.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
            // call function get moves
        }
    }
    function mobileFocusPiece(event) {
        let t = event.target;    
        let chessboardel;

        while (!t.classList.contains('board')) 
            t = t.parentElement;
        
        Object.assign([], t.classList).forEach(el => {
            if (el != 'board') {
                if (window['chessboards'][el]) {
                    window['activeboard'] = window['chessboards'][el];
                    chessboardel = window['chessboards'][el];
                }
            }
        })

        if (
            ((chessboardel.datas.move && (Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0))
            || 
            (!chessboardel.datas.move && !(Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0)))
            ) {
                if (chessboardel.datas.markedPiece)
                    chessboardel.datas.markedPiece.style.boxShadow =  '';
        
                chessboardel.datas.activePiece = event.target;
        
                chessboardel.datas.mouseX = event.touches[0].clientX;
                chessboardel.datas.mouseY = event.touches[0].clientY;

                let rect = event.target.getBoundingClientRect()
                chessboardel.datas.offsetX = (event.touches[0].clientX /*- window.pageXOffset*/ - rect.left)
                chessboardel.datas.offsetY = (event.touches[0].clientY /*- window.pageYOffset*/ - rect.top)      
        
                chessboardel.datas.activePiece.style.position = 'fixed'
                chessboardel.datas.activePiece.style.left = `${mouseX - u}px` 
                chessboardel.datas.activePiece.style.top =`${mouseY - u}px`
                chessboardel.datas.activePiece.style.height = `${2 * u}px` 
                chessboardel.datas.activePiece.style.width = `${2 * u}px` 
        
                chessboardel.datas.markedPiece = event.target.parentElement;
                chessboardel.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
                // call function get moves
            }
    }

    // warn cases
    function warnCase(event) {
        let t = event.target;    
        let chessboardel;

        while (!t.classList.contains('board')) 
            t = t.parentElement;
        
        Object.assign([], t.classList).forEach(el => {
            if (el != 'board') {
                if (window['chessboards'][el]) {
                    window['activeboard'] = window['chessboards'][el];
                    chessboardel = window['chessboards'][el];
                }
            }
        })

        let target = event.target;
        if (event.target.tagName == 'DIV')
            target = target.parentElement;

        let targetIndex = Array.prototype.indexOf.call(chessboardel.datas.warnCases, target);
        if (targetIndex >= 0) {
            chessboardel.datas.warnCases.splice(targetIndex, 1);
            target.style.background = ''
        }
        else {
            target.style.background = '#db4e2c'

            let X = Array.prototype.indexOf.call(target.parentNode.children, target) - 1;
            let Y = Math.abs(Array.prototype.indexOf.call(target.parentNode.parentNode.children, target.parentNode) + 9) - 9;
            
            if (X % 2 == Y % 2) 
            target.style.background = '#f06948'
                    
            chessboardel.datas.warnCases.push(target);
        }
    }
    function stopWarn(event) {
        let t = event.target;    
        let chessboardel;

        while (!t.classList.contains('board')) 
            t = t.parentElement;
        
        Object.assign([], t.classList).forEach(el => {
            if (el != 'board') {
                if (window['chessboards'][el]) {
                    window['activeboard'] = window['chessboards'][el];
                    chessboardel = window['chessboards'][el];
                }
            }
        })

        if (event.target.children.length == 0 && event.target.tagName != 'DIV') {
            // delete marker
            while (chessboardel.datas.warnCases.length > 0) {
                chessboardel.datas.warnCases[0].style.background = ''
                chessboardel.datas.warnCases.shift()
            }
        }
    }

    window['chessboards'][chessclass].onmouseup = () => { 
        let chessboardel = window['activeboard']

        try {
            if (chessboardel.datas.activePiece) {
                chessboardel.datas.activePiece.style.position = `initial`
                chessboardel.datas.activePiece.style.height = `` 
                chessboardel.datas.activePiece.style.width = `` 
            }

            // verification
            if ((true) && chessboardel.datas.activePiece) {
                console.log(chessboardel.datas)
                if ((chessboardel.datas.currentX != chessboardel.datas.startX || chessboardel.datas.currentY != chessboardel.datas.startY) && (chessboardel.length - chessboardel.datas.currentY - 1 < chessboardel.chessboard.length && chessboardel.chessboard.length - chessboardel.datas.currentY - 1 >= 0) && (chessboardel.datas.currentX < chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1].length && chessboardel.datas.currentX >= 0)) {
                    chessboardel.datas.activePiece.parentElement.removeChild(chessboardel.datas.activePiece);
                    chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1][chessboardel.datas.currentX].innerHTML = ''
                    chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1][chessboardel.datas.currentX].appendChild(chessboardel.datas.activePiece);

                    if (chessboardel.datas.markedPiece)
                        chessboardel.datas.markedPiece.style.boxShadow =  '';

                    // delete marker
                    while (chessboardel.datas.warnCases.length > 0) {
                        chessboardel.datas.warnCases[0].style.background = ''
                        chessboardel.datas.warnCases.shift()
                    }

                    chessboardel.datas.move = !chessboardel.datas.move
                }
            }

            chessboardel.datas.activePiece = null; 
            chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1][chessboardel.datas.lastMoveX].style.boxShadow = '';
            [chessboardel.datas.currentY, chessboardel.datas.currentX, chessboardel.datas.startY, chessboardel.datas.startX, chessboardel.datas.lastMoveY, chessboardel.datas.lastMoveX] = [0, 0, 0, 0, 0, 0]
        } catch {}
    }
    window['chessboards'][chessclass].ontouchend = () => {
        let chessboardel = window['activeboard']

        if (chessboardel.datas.activePiece) {
            chessboardel.datas.activePiece.style.position = `initial`
            chessboardel.datas.activePiece.style.height = `` 
            chessboardel.datas.activePiece.style.width = `` 
        }

        // verification
        if ((true) && chessboardel.datas.activePiece) {
            if ((chessboardel.datas.currentX != chessboardel.datas.startX || chessboardel.datas.currentY != chessboardel.datas.startY) && (chessboardel.chessboard.length - chessboardel.datas.currentY - 1 < chessboardel.chessboard.length && chessboardel.chessboard.length - chessboardel.datas.currentY - 1 >= 0) && (chessboardel.datas.currentX < chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1].length && chessboardel.datas.currentX >= 0)) {
                chessboardel.datas.activePiece.parentElement.removeChild(chessboardel.datas.activePiece);
                chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1][chessboardel.datas.currentX].innerHTML = ''
                chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1][chessboardel.datas.currentX].appendChild(chessboardel.datas.activePiece);

                if (chessboardel.datas.markedPiece)
                    chessboardel.datas.markedPiece.style.boxShadow =  '';

                // delete marker
                while (chessboardel.datas.warnCases.length > 0) {
                    chessboardel.datas.warnCases[0].style.background = ''
                    chessboardel.datas.warnCases.shift()
                }

                chessboardel.datas.move = !chessboardel.datas.move
            }
        }

        chessboardel.datas.activePiece = null; 
        chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1][chessboardel.datas.lastMoveX].style.boxShadow = '';
        [chessboardel.datas.currentY, chessboardel.datas.currentX, chessboardel.datas.startY, chessboardel.datas.startX, chessboardel.datas.lastMoveY, chessboardel.datas.lastMoveX] = [0, 0, 0, 0, 0, 0]
    }

    window['chessboards'][chessclass].ontouchmove = (event) => {
        if (activePiece != null) {
            activePiece.style.left = `${event.touches[0].clientX - u}px` 
            activePiece.style.top =`${event.touches[0].clientY - u}px`

            indexX = (mouseX - event.touches[0].clientX - offsetX) / (u * 2)
            if (indexX > 0)
                indexX++;
            indexY = (mouseY - event.touches[0].clientY - offsetY) / (u * 2)
                if (indexY > 0)
                    indexY++;

            indexX = parseInt(indexX);
            indexY = parseInt(indexY);

            let X = Array.prototype.indexOf.call(markedPiece.parentNode.children, markedPiece) - 1;
            let Y = Math.abs(Array.prototype.indexOf.call(markedPiece.parentNode.parentNode.children, markedPiece.parentNode) + 9) - 9;
            
            currentY = Y - indexY;
            currentX = X - indexX;

            startX = X
            startY = Y

            if (lastMoveX != -1 && lastMoveY != -1) {
                if (chessboard.length - lastMoveY - 1 >= 0 && chessboard.length - lastMoveY - 1 < chessboard.length)
                    if (lastMoveX >= 0 && lastMoveX < chessboard[chessboard.length - lastMoveY - 1].length)
                        chessboard[chessboard.length - lastMoveY - 1][lastMoveX].style.boxShadow = '';
                if (chessboard.length - currentY - 1 >= 0 && chessboard.length - currentY - 1 < chessboard.length)
                    if (currentX >= 0 && currentX < chessboard[chessboard.length - currentY - 1].length)
                        chessboard[chessboard.length - currentY - 1][currentX].style.boxShadow = 'inset 0 0 0 3px #78acd6';
                markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
            }

            lastMoveX = currentX;
            lastMoveY = currentY;

        }
    }
    window['chessboards'][chessclass].onmousemove = (event) => {  
        try {
            let chessboardel = window['activeboard']
            console.log(chessboardel.datas)
        
            if (chessboardel.datas.activePiece != null) {
                chessboardel.datas.activePiece.style.left = `${event.clientX - u}px` 
                chessboardel.datas.activePiece.style.top =`${event.clientY - u}px`

                chessboardel.datas.indexX = (chessboardel.datas.mouseX - event.clientX - chessboardel.datas.offsetX) / (chessboardel.u * 2)
                if (chessboardel.datas.indexX > 0)
                    chessboardel.datas.indexX++;
                chessboardel.datas.indexY = (chessboardel.datas.mouseY - event.clientY - chessboardel.datas.offsetY) / (chessboardel.u * 2)
                    if (chessboardel.datas.indexY > 0)
                        chessboardel.datas.indexY++;

                chessboardel.datas.indexX = parseInt(chessboardel.datas.indexX);
                chessboardel.datas.indexY = parseInt(chessboardel.datas.indexY);

                let X = Array.prototype.indexOf.call(chessboardel.datas.markedPiece.parentNode.children, chessboardel.datas.markedPiece) - 1;
                let Y = Math.abs(Array.prototype.indexOf.call(chessboardel.datas.markedPiece.parentNode.parentNode.children, chessboardel.datas.markedPiece.parentNode) + 9) - 9;

                chessboardel.datas.currentY = Y - chessboardel.datas.indexY;
                chessboardel.datas.currentX = X - chessboardel.datas.indexX;

                chessboardel.datas.startX = X
                chessboardel.datas.startY = Y

                console.log(chessboardel.datas.currentX)

                if (chessboardel.datas.lastMoveX != -1 && chessboardel.datas.lastMoveY != -1) {
                    if (chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1 >= 0 && chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1 < chessboardel.chessboard.length)
                        if (chessboardel.datas.lastMoveX >= 0 && chessboardel.datas.lastMoveX < chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1].length)
                            chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.lastMoveY - 1][chessboardel.datas.lastMoveX].style.boxShadow = '';
                    if (chessboardel.chessboard.length - chessboardel.datas.currentY - 1 >= 0 && chessboardel.chessboard.length - chessboardel.datas.currentY - 1 < chessboardel.chessboard.length)
                        if (chessboardel.datas.currentX >= 0 && chessboardel.datas.currentX < chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1].length)
                            chessboardel.chessboard[chessboardel.chessboard.length - chessboardel.datas.currentY - 1][chessboardel.datas.currentX].style.boxShadow = 'inset 0 0 0 3px #78acd6';
                    chessboardel.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
                }

                chessboardel.datas.lastMoveX = chessboardel.datas.currentX;
                chessboardel.datas.lastMoveY = chessboardel.datas.currentY;


                console.log(chessboardel.datas)
                // LOG IN CASE OF PROBLEMS
                //console.log(startX, startY)
                //console.log(currentX, currentY)
            }
        } catch {}
    }

    let chessboardtable = document.querySelector(`.${chessclass}`).querySelector('tbody');
    let pieces = chessboardtable.querySelectorAll('div');

    chessboardtable.querySelectorAll('th').forEach(e => {
        e.addEventListener('mousedown', (event) => { if (event.preventDefault) event.preventDefault() })
        e.addEventListener('touchstart', (event) => { if (event.preventDefault) event.preventDefault() })
    })
    chessboardtable.querySelectorAll('td').forEach(e => {
        e.addEventListener('mousedown', (event) => { if (event.preventDefault) event.preventDefault() })
        e.addEventListener('touchstart', (event) => { if (event.preventDefault) event.preventDefault() })
    })

    for (let i = 0; i < pieces.length; i++) {
        pieces[i].addEventListener('mousedown', (event) => { focusPiece(event) })
        pieces[i].addEventListener('touchstart', (event) => { mobileFocusPiece(event) })
    }

    for (let i = 0; i < chessboardtable.children.length - 1; i++) {
        chessboard.push([]);
        for (let j = 1; j < chessboardtable.children[i].children.length; j++) {
            chessboard[chessboard.length - 1].push(chessboardtable.children[i].children[j])
            chessboardtable.children[i].children[j].addEventListener('contextmenu', (event) => { event.preventDefault(); warnCase(event) })
            chessboardtable.children[i].children[j].addEventListener('click', (event) => { stopWarn(event) })
        }
    }

    chessboard = chessboard.reverse()

    for (let i = 0; i < chessboard.length; i++) {
        for (let j = 0; j < chessboard[i].length; j++) {
            chessboard[i][j].style.width = `${2 * u}px`
            chessboard[i][j].style.height = `${2 * u}px`
        }
    }

</script>
