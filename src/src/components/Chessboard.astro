---
const {chessclass, color} = Astro.props
---

<div style="width: 100%; aspect-ratio: 1 / 1;">
    <table data-theme="default">
        <tbody>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
            <tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
        </tbody>
    </table>
    <table class:list={[chessclass, "board"]}>
        <tbody>
            <tr>
                <td data-y-marker="8"><div class="br"></div></td>
                <td><div class="bn"></div></td>
                <td><div class="bb"></div></td>
                <td><div class="bq"></div></td>
                <td><div class="bk"></div></td>
                <td><div class="bb"></div></td>
                <td><div class="bn"></div></td>
                <td><div class="br"></div></td>
            </tr>
            <tr>
                <td data-y-marker="7"><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
                <td><div class="bp"></div></td>
            </tr>
            <tr>
                <td data-y-marker="6"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td data-y-marker="5"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td data-y-marker="4"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td data-y-marker="3"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <td data-y-marker="2"><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
                <td><div class="wp"></div></td>
            </tr>
            <tr>
                <td data-x-marker="a" data-y-marker="1"><div class="wr"></div></td>
                <td data-x-marker="b"><div class="wn"></div></td>
                <td data-x-marker="c"><div class="wb"></div></td>
                <td data-x-marker="d"><div class="wq"></div></td>
                <td data-x-marker="e"><div class="wk"></div></td>
                <td data-x-marker="f"><div class="wb"></div></td>
                <td data-x-marker="g"><div class="wn"></div></td>
                <td data-x-marker="h"><div class="wr"></div></td>
            </tr>
        </tbody>
    </table>
</div>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

::selection {
    background: inherit;
    color: inherit;
}

:root {
    /* Default theme */
    --defaultthemew: #eee;
    --defaultthemeb: #5b5b68;

	/* Gotham theme*/
	--gothamthemew: #f0d9b5;
    --gothamthemeb: #b58863;
}

td {
    position: relative;
}

.board tr:last-child td::after {
    content: attr(data-x-marker);
    display: flex;
    position: absolute;
    bottom: 3px;
    right: 3px;
    font-weight: 900;
}
.board tr td:first-child::before {
    content: attr(data-y-marker);
    display: flex;
    position: absolute;
    top: 3px;
    left: 3px;
    font-weight: 900;
}

table {
    border-collapse: collapse;
    position: absolute;
    top: 0px;
    right: 0px;
}

.board {
    border-spacing: 0;
    font-family: 'Roboto', sans-serif;
}

.board td div {
    width: 100%;
    height: 100%;
    z-index: 10;
}    

.br, .bn, .bb, .bq, .bk, .bp, .wr, .wn, .wb, .wq, .wk, .wp {
    background-size: 100% 100%;
    cursor:grab;
}

.br { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/br.png'); }
.bn { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bn.png'); }
.bb { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bb.png'); }
.bq { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bq.png'); }
.bk { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bk.png'); }
.bp { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/bp.png'); }

.wr { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wr.png'); }
.wn { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wn.png'); }
.wb { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wb.png'); }
.wq { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wq.png'); }
.wk { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wk.png'); }
.wp { background-image: url('https://www.chess.com/chess-themes/pieces/neo/150/wp.png'); }

table[data-theme=default] tr:nth-child(even) td:nth-child(even), table[data-theme=default] tr:nth-child(odd) td:nth-child(odd) {
	background: var(--defaultthemeb);
	color: var(--defaultthemew);
}
table[data-theme=default] tr:nth-child(even) td:nth-child(odd), table[data-theme=default] tr:nth-child(odd) td:nth-child(even){
	background: var(--defaultthemew);
	color: var(--defaultthemeb);
}

table[data-theme=gotham] tr:nth-child(even) td:nth-child(even), table[data-theme=gotham] tr:nth-child(odd) td:nth-child(odd) {
	background: var(--gothamthemeb);
	color: var(--gothamthemew);
}
table[data-theme=gotham] tr:nth-child(even) td:nth-child(odd), table[data-theme=gotham] tr:nth-child(odd) td:nth-child(even){
	background: var(--gothamthemew);
	color: var(--gothamthemeb);
}
</style>
<script define:vars={{ chessclass }}>
    if (!window['chessboards'])
        window['chessboards'] = {};
    window['chessboards'][chessclass] = document.querySelector(`.${chessclass}`);
    
    window['chessboards'][chessclass].parentElement.querySelectorAll('table').forEach(table => {
        table.addEventListener('contextmenu', (event) => { event.preventDefault(); })
    })

    new ResizeObserver(() => {
        window['chessboards'][chessclass].u = (window['chessboards'][chessclass].parentElement.clientWidth) / 16;
        let u = window['chessboards'][chessclass].u;

        window['chessboards'][chessclass].parentElement.querySelectorAll('td').forEach(td => {
            td.style.width = `${2 * u}px`
            td.style.height = `${2 * u}px`
        })

        for (const [key, value] of Object.entries(window['chessboards'][chessclass].arrows)) {
            t = window['chessboards'][chessclass];
            let warnT = window['chessboards'][chessclass].arrows[key], X = parseInt(key[0]), warnX = parseInt(key[1]), Y = parseInt(key[2]), warnY = parseInt(key[3]);
            let hyp = t.u * 2 * Math.sqrt(Math.pow(Math.abs(Y - warnY), 2) + Math.pow(Math.abs(X - warnX), 2));

            warnT.style.width = `${t.u / 2}px`;
            warnT.style.height = `${hyp}px`;
            warnT.style.transformOrigin = 'top center';
            warnT.style.transform = `translate(${t.u - (t.u / 4)}px, ${t.u}px) rotate(${(Math.atan(Math.abs(X - warnX) / Math.abs(Y - warnY)) / Math.PI * 180) * (X < warnX ? -1 : 1) * (Y > warnY ? -1 : 1) + (Y > warnY ? 180 : 0)}deg)`;
            warnT.style.background = '#8fe3a5'
            warnT.style.position = 'absolute'

            warnT.style.left = `${(X * t.u * 2)}px`;
            warnT.style.top = `${(Y * t.u * 2)}px`;
            warnT.style.zIndex = '2';
            warnT.style.opacity = '0.75';     
            warnT.style.pointerEvents = 'none'

            warnT.innerHTML = `<div style="position: absolute; width: ${t.u / 1.7}px; height: ${t.u * 1.2}px; background: #8fe3a5; transform-origin: top center; left: 50%; top: 0px; transform: translateX(calc(-50% + ${t.u / 5}px)) translateY(-${t.u / 4}px) rotate(45deg);"></div>
                                 <div style="position: absolute; width: ${t.u / 1.7}px; height: ${t.u * 1.2}px; background: #8fe3a5; transform-origin: top center; left: 50%; top: 0px; transform: translateX(calc(-50% - ${t.u / 5}px)) translateY(-${t.u / 4}px) rotate(-45deg);"></div>`
            
            console.log(key)
        }
    }).observe(window['chessboards'][chessclass].parentElement)

    /*
    INITIALISATION
    */

    // chessboard
    document.querySelector(`.${chessclass}`).chessboard = [];
    let chessboard = document.querySelector(`.${chessclass}`).chessboard;
    // u unit
    document.querySelector(`.${chessclass}`).u = (document.querySelector(`.${chessclass}`).parentElement.clientWidth) / 16;
    let u = document.querySelector(`.${chessclass}`).u;
    document.querySelector(`.${chessclass}`).datas = { offsetX: 0, offsetY: 0, mouseX: 0, mouseY: 0, indexX: 0, indexY: 0, startX: 0, startY: 0, currentX: 0, currentY: 0, lastMoveX: -1, lastMoveY: -1, activePiece: null, markedPiece: null, warnCases: [], move: true }

    let chessboardtable = document.querySelector(`.${chessclass}`).querySelector('tbody');
    let pieces = chessboardtable.querySelectorAll('div');

    window['chessboards'][chessclass].parentElement.querySelectorAll('td').forEach(td => {
        td.style.width = `${2 * u}px`
        td.style.height = `${2 * u}px`
    })

    /*
    DESKTOP
    */
    function focusPiece(event) {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;

        if (
        ((t.datas.move && (Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0))
        || 
        (!t.datas.move && !(Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0)))
        && event.which == 1
        ) {
            // delete marker
            while (t.datas.warnCases.length > 0) {
                t.datas.warnCases[0].style.background = ''
                t.datas.warnCases.shift()
            }
            t.parentElement.querySelector('table[data-theme]').querySelectorAll('div').forEach(el => { try { t.parentElement.querySelector('table[data-theme]').removeChild(el) } catch {}})
            t.arrows = {};

            if (t.datas.markedPiece)
                document.querySelector('table[data-theme] tbody').children[t.datas.markedXY[1]].children[t.datas.markedXY[0]].style.boxShadow =  '';
                
            t.datas.activePiece = event.target;
            t.datas.mouseX = event.clientX;
            t.datas.mouseY = event.clientY;
            t.datas.offsetX = event.offsetX;
            t.datas.offsetY = event.offsetY;
            t.datas.activePiece.style.position = 'fixed'
            t.datas.activePiece.style.left = `${event.clientX - t.u}px` 
            t.datas.activePiece.style.top =`${event.clientY - t.u}px`
            t.datas.activePiece.style.height = `${2 * t.u}px` 
            t.datas.activePiece.style.width = `${2 * t.u}px` 
            t.datas.markedPiece = event.target.parentElement;
            //t.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px red';

            let x = Array.prototype.indexOf.call(t.datas.markedPiece.parentElement.children, t.datas.markedPiece), 
                y = Array.prototype.indexOf.call(t.datas.markedPiece.parentElement.parentElement.children, t.datas.markedPiece.parentElement);

            document.querySelector('table[data-theme] tbody').children[y].children[x].style.boxShadow = 'inset 0 0 0 3px #94d678';
            t.datas.markedXY = [x, y];
            // call function get moves
        }
    }
    window['chessboards'][chessclass].onmousemove = (event) => {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;
        
        if (t.datas.activePiece != null) {
            t.datas.activePiece.style.left = `${event.clientX - t.u}px` 
            t.datas.activePiece.style.top =`${event.clientY - t.u}px`
            t.datas.indexX = (t.datas.mouseX - event.clientX - t.datas.offsetX) / (t.u * 2)
            if (t.datas.indexX > 0)
                t.datas.indexX++;
            t.datas.indexY = (t.datas.mouseY - event.clientY - t.datas.offsetY) / (t.u * 2)
            if (t.datas.indexY > 0)
                t.datas.indexY++;
            t.datas.indexX = parseInt(t.datas.indexX);
            t.datas.indexY = parseInt(t.datas.indexY);
            let X = Array.prototype.indexOf.call(t.datas.markedPiece.parentNode.children, t.datas.markedPiece);
            let Y = Math.abs(Array.prototype.indexOf.call(t.datas.markedPiece.parentNode.parentNode.children, t.datas.markedPiece.parentNode) + 8) - 8;
            
            t.datas.currentY = Y - t.datas.indexY;
            t.datas.currentX = X - t.datas.indexX;
            t.datas.startX = X
            t.datas.startY = Y
            if (t.datas.lastMoveX != -1 && t.datas.lastMoveY != -1) {
                if (t.chessboard.length - t.datas.lastMoveY - 1 >= 0 && t.chessboard.length - t.datas.lastMoveY - 1 < t.chessboard.length)
                    if (t.datas.lastMoveX >= 0 && t.datas.lastMoveX < t.chessboard[t.chessboard.length - t.datas.lastMoveY - 1].length)
                        document.querySelector('table[data-theme] tbody').children[t.datas.lastMoveY].children[t.datas.lastMoveX].style.boxShadow = '';
                if (t.chessboard.length - t.datas.currentY - 1 >= 0 && t.chessboard.length - t.datas.currentY - 1 < t.chessboard.length)
                    if (t.datas.currentX >= 0 && t.datas.currentX < t.chessboard[t.chessboard.length - t.datas.currentY - 1].length)
                        document.querySelector('table[data-theme] tbody').children[t.datas.currentY].children[t.datas.currentX].style.boxShadow = 'inset 0 0 0 3px #78acd6';
                
                let x = Array.prototype.indexOf.call(t.datas.markedPiece.parentElement.children, t.datas.markedPiece), 
                    y = Array.prototype.indexOf.call(t.datas.markedPiece.parentElement.parentElement.children, t.datas.markedPiece.parentElement);
                document.querySelector('table[data-theme] tbody').children[y].children[x].style.boxShadow = 'inset 0 0 0 3px #94d678';
            }
            t.datas.lastMoveX = t.datas.currentX;
            t.datas.lastMoveY = t.datas.currentY;
            // LOG IN CASE OF PROBLEMS
            //console.log(t.datas.startX, t.datas.startY)
            //console.log(t.datas.currentX, t.datas.currentY)
        }

        if (t.warnX > -1 && t.warnY > -1) {
            let target = event.target;
            if (target.tagName == 'DIV')
                target = target.parentElement;
        }
    }
    window['chessboards'][chessclass].onmouseup = (event) => { 
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;

        if (t.datas.activePiece) {
            t.datas.activePiece.style.position = `initial`
            t.datas.activePiece.style.height = `` 
            t.datas.activePiece.style.width = `` 
        }
        // verification
        if ((true) && t.datas.activePiece) {
            if ((t.datas.currentX != t.datas.startX || t.datas.currentY != t.datas.startY) && (t.chessboard.length - t.datas.currentY - 1 < t.chessboard.length && t.chessboard.length - t.datas.currentY - 1 >= 0) && (t.datas.currentX < t.chessboard[t.chessboard.length - t.datas.currentY - 1].length && t.datas.currentX >= 0)) {
                t.datas.activePiece.parentElement.removeChild(t.datas.activePiece);
                t.chessboard[t.chessboard.length - t.datas.currentY - 1][t.datas.currentX].innerHTML = ''
                t.chessboard[t.chessboard.length - t.datas.currentY - 1][t.datas.currentX].appendChild(t.datas.activePiece);
                if (t.datas.markedPiece)
                    t.datas.markedPiece.style.boxShadow =  '';
                // delete marker
                while (t.datas.warnCases.length > 0) {
                    t.datas.warnCases[0].style.background = ''
                    t.datas.warnCases.shift()
                }
                t.parentElement.querySelector('table[data-theme]').querySelectorAll('div').forEach(el => { try { t.parentElement.querySelector('table[data-theme]').removeChild(el) } catch {}})
                t.datas.move = !t.datas.move
            }
        }
        t.datas.activePiece = null; 
        document.querySelector('table[data-theme] tbody').children[t.datas.currentY].children[t.datas.currentX].style.boxShadow = '';
        [t.datas.currentY, t.datas.currentX, t.datas.startY, t.datas.startX, t.datas.lastMoveY, t.datas.lastMoveX] = [0, 0, 0, 0, 0, 0]
    }
    /*
    MOBILE
    */
    function mobileFocusPiece(event) {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;
        if (
        ((t.datas.move && (Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0))
        || 
        (!t.datas.move && !(Array.prototype.indexOf.call(event.target.classList, 'wr') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wn') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wb') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wq') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wk') >= 0 || Array.prototype.indexOf.call(event.target.classList, 'wp') >= 0)))
        ) {
            if (t.datas.markedPiece)
                document.querySelector('table[data-theme] tbody').children[t.datas.markedXY[1]].children[t.datas.markedXY[0]].style.boxShadow =  '';
            t.datas.activePiece = event.target;
    
            t.datas.mouseX = event.touches[0].clientX;
            t.datas.mouseY = event.touches[0].clientY;
            let rect = event.target.getBoundingClientRect()
            t.datas.offsetX = (event.touches[0].clientX /*- window.pageXOffset*/ - rect.left)
            t.datas.offsetY = (event.touches[0].clientY /*- window.pageYOffset*/ - rect.top)
            //console.log(event.touches[0].clientY, window.pageYOffset, rect.top)       
            //console.log(event.touches[0].clientX, window.pageXOffset, rect.left)            
    
            t.datas.activePiece.style.position = 'fixed'
            t.datas.activePiece.style.left = `${t.datas.mouseX - t.u}px` 
            t.datas.activePiece.style.top =`${t.datas.mouseY - t.u}px`
            t.datas.activePiece.style.height = `${2 * t.u}px` 
            t.datas.activePiece.style.width = `${2 * t.u}px` 
    
            t.datas.markedPiece = event.target.parentElement;
            t.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
            // call function get moves
        }
    }
    window['chessboards'][chessclass].ontouchmove = (event) => {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;
        if (t.datas.activePiece != null) {
            t.datas.activePiece.style.left = `${event.touches[0].clientX - t.u}px` 
            t.datas.activePiece.style.top =`${event.touches[0].clientY - t.u}px`
            t.datas.indexX = (t.datas.mouseX - event.touches[0].clientX - t.datas.offsetX) / (t.u * 2)
            if (t.datas.indexX > 0)
                t.datas.indexX++;
            t.datas.indexY = (t.datas.mouseY - event.touches[0].clientY - t.datas.offsetY) / (t.u * 2)
            if (t.datas.indexY > 0)
                t.datas.indexY++;
            t.datas.indexX = parseInt(t.datas.indexX);
            t.datas.indexY = parseInt(t.datas.indexY);
            let X = Array.prototype.indexOf.call(t.datas.markedPiece.parentNode.children, t.datas.markedPiece);
            let Y = Math.abs(Array.prototype.indexOf.call(t.datas.markedPiece.parentNode.parentNode.children, t.datas.markedPiece.parentNode) + 8) - 8;
            
            t.datas.currentY = Y - t.datas.indexY;
            t.datas.currentX = X - t.datas.indexX;
            t.datas.startX = X
            t.datas.startY = Y
            if (t.datas.lastMoveX != -1 && t.datas.lastMoveY != -1) {
                if (t.chessboard.length - t.datas.lastMoveY - 1 >= 0 && t.chessboard.length - t.datas.lastMoveY - 1 < t.chessboard.length)
                    if (t.datas.lastMoveX >= 0 && t.datas.lastMoveX < t.chessboard[t.chessboard.length - t.datas.lastMoveY - 1].length)
                        t.chessboard[t.chessboard.length - t.datas.lastMoveY - 1][t.datas.lastMoveX].style.boxShadow = '';
                if (t.chessboard.length - t.datas.currentY - 1 >= 0 && t.chessboard.length - t.datas.currentY - 1 < t.chessboard.length)
                    if (t.datas.currentX >= 0 && t.datas.currentX < t.chessboard[t.chessboard.length - t.datas.currentY - 1].length)
                        t.chessboard[t.chessboard.length - t.datas.currentY - 1][t.datas.currentX].style.boxShadow = 'inset 0 0 0 3px #78acd6';
                t.datas.markedPiece.style.boxShadow = 'inset 0 0 0 3px #94d678';
            }
            t.datas.lastMoveX = t.datas.currentX;
            t.datas.lastMoveY = t.datas.currentY;
        }
    }
    window['chessboards'][chessclass].ontouchend = (event) => {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;
        
            if (t.datas.activePiece) {
                t.datas.activePiece.style.position = `initial`
                t.datas.activePiece.style.height = `` 
                t.datas.activePiece.style.width = `` 
            }
            // verification
            if ((true) && t.datas.activePiece) {
                if ((t.datas.currentX != t.datas.startX || t.datas.currentY != t.datas.startY) && (t.chessboard.length - t.datas.currentY - 1 < t.chessboard.length && t.chessboard.length - t.datas.currentY - 1 >= 0) && (t.datas.currentX < t.chessboard[t.chessboard.length - t.datas.currentY - 1].length && t.datas.currentX >= 0)) {
                    t.datas.activePiece.parentElement.removeChild(t.datas.activePiece);
                    t.chessboard[t.chessboard.length - t.datas.currentY - 1][t.datas.currentX].innerHTML = ''
                    t.chessboard[t.chessboard.length - t.datas.currentY - 1][t.datas.currentX].appendChild(t.datas.activePiece);
                    if (t.datas.markedPiece)
                        t.datas.markedPiece.style.boxShadow =  '';
                    // delete marker
                    while (t.datas.warnCases.length > 0) {
                        t.datas.warnCases[0].style.background = ''
                        t.datas.warnCases.shift()
                    }
                    t.parentElement.querySelector('table[data-theme]').querySelectorAll('div').forEach(el => { try { t.parentElement.querySelector('table[data-theme]').removeChild(el) } catch {}})
                    t.datas.move = !t.datas.move
                }
            }
            t.datas.activePiece = null; 
            t.chessboard[t.chessboard.length - t.datas.lastMoveY - 1][t.datas.lastMoveX].style.boxShadow = '';
            [t.datas.currentY, t.datas.currentX, t.datas.startY, t.datas.startX, t.datas.lastMoveY, t.datas.lastMoveX] = [0, 0, 0, 0, 0, 0]
    }
    /*
    WARN CASE
    */
    function startWarnCase(event) {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;

        let target = event.target;
        if (event.target.tagName == 'DIV')
            target = target.parentElement;

        if (event.which == 3) {
            t.warnX = Array.prototype.indexOf.call(target.parentNode.children, target);
            t.warnY = Math.abs(Array.prototype.indexOf.call(target.parentNode.parentNode.children, target.parentNode) + 8) - 8;
            t.warnT = document.createElement('div');
            t.parentElement.querySelector('table[data-theme]').appendChild(t.warnT)

            if (t.arrows == null) 
                t.arrows = {}
        }
    }
    function endWarnCase(event) {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;

        warnCases = t.datas.warnCases;
        let target = event.target;
        if (event.target.tagName == 'DIV')
            target = target.parentElement;

        let X = Array.prototype.indexOf.call(target.parentNode.children, target);
        let Y = Math.abs(Array.prototype.indexOf.call(target.parentNode.parentNode.children, target.parentNode) + 8) - 8;

        if (X == t.warnX && Y == t.warnY) {
            let ct = t.parentElement.querySelector('table[data-theme]').querySelectorAll('tr')[Y].querySelectorAll('td')[X]
            let targetIndex = Array.prototype.indexOf.call(warnCases, ct);
            if (targetIndex >= 0) {
                warnCases.splice(targetIndex, 1);
                ct.style.background = ''
            }
            else {
                ct.style.background = '#db4e2c'            
                if (X % 2 == Y % 2) 
                    ct.style.background = '#f06948'
                        
                warnCases.push(ct);
            }

            t.parentElement.querySelector('table[data-theme]').removeChild(t.warnT)
        }

        if (t.arrows && t.arrows[`${X}${t.warnX}${Y}${t.warnY}`] != null) {
            t.parentElement.querySelector('table[data-theme]').removeChild(t.warnT)
            t.parentElement.querySelector('table[data-theme]').removeChild(t.arrows[`${X}${t.warnX}${Y}${t.warnY}`])
            delete t.arrows[`${X}${t.warnX}${Y}${t.warnY}`];
        }
        else {
            if (t.warnT) {
                let hyp = t.u * 2 * Math.sqrt(Math.pow(Math.abs(Y - t.warnY), 2) + Math.pow(Math.abs(X - t.warnX), 2));

                t.warnT.style.width = `${t.u / 2}px`;
                t.warnT.style.height = `${hyp}px`;
                t.warnT.style.transformOrigin = 'top center';
                t.warnT.style.transform = `translate(${t.u - (t.u / 4)}px, ${t.u}px) rotate(${(Math.atan(Math.abs(X - t.warnX) / Math.abs(Y - t.warnY)) / Math.PI * 180) * (X < t.warnX ? -1 : 1) * (Y > t.warnY ? -1 : 1) + (Y > t.warnY ? 180 : 0)}deg)`;
                t.warnT.style.background = '#8fe3a5'
                t.warnT.style.position = 'absolute'

                t.warnT.style.left = `${(X * t.u * 2)}px`;
                t.warnT.style.top = `${(Y * t.u * 2)}px`;
                t.warnT.style.zIndex = '2';
                t.warnT.style.opacity = '0.75';     
                t.warnT.style.pointerEvents = 'none'

                t.warnT.innerHTML = `<div style="position: absolute; width: ${t.u / 1.7}px; height: ${t.u * 1.2}px; background: #8fe3a5; transform-origin: top center; left: 50%; top: 0px; transform: translateX(calc(-50% + ${t.u / 5}px)) translateY(-${t.u / 4}px) rotate(45deg);"></div>
                                    <div style="position: absolute; width: ${t.u / 1.7}px; height: ${t.u * 1.2}px; background: #8fe3a5; transform-origin: top center; left: 50%; top: 0px; transform: translateX(calc(-50% - ${t.u / 5}px)) translateY(-${t.u / 4}px) rotate(-45deg);"></div>`
                
                t.arrows[`${X}${t.warnX}${Y}${t.warnY}`] = t.warnT
            }
        }

        t.warnX = -1
        t.warnY = -1
        t.warnT = null
    }
    function stopWarn(event) {
        let t = event.target;
        while (!t.classList.contains('board'))
            t = t.parentElement;
        
        warnCases = t.datas.warnCases;

        if (event.target.children.length == 0 && event.target.tagName != 'DIV') {
            // delete marker
            while (warnCases.length > 0) {
                warnCases[0].style.background = ''
                warnCases.shift()
            }
            t.parentElement.querySelector('table[data-theme]').querySelectorAll('div').forEach(el => { try { t.parentElement.querySelector('table[data-theme]').removeChild(el) } catch {}})
            t.arrows = {};
        }
    }

    chessboardtable.querySelectorAll('td').forEach(e => {
        e.addEventListener('mousedown', (event) => { if (event.preventDefault) event.preventDefault() })
        e.addEventListener('touchstart', (event) => { if (event.preventDefault) event.preventDefault() })
    })
    for (let i = 0; i < pieces.length; i++) {
        pieces[i].addEventListener('mousedown', (event) => { event.preventDefault(); focusPiece(event) })
        pieces[i].addEventListener('touchstart', (event) => { mobileFocusPiece(event) })
    }
    for (let i = 0; i < chessboardtable.children.length; i++) {
        chessboard.push([]);
        for (let j = 0; j < chessboardtable.children[i].children.length; j++) {
            chessboard[chessboard.length - 1].push(chessboardtable.children[i].children[j])
            chessboardtable.children[i].children[j].addEventListener('mousedown', (event) => { event.preventDefault(); startWarnCase(event) })
            chessboardtable.children[i].children[j].addEventListener('mouseup', (event) => { event.preventDefault(); endWarnCase(event) })
            chessboardtable.children[i].children[j].addEventListener('click', (event) => { event.preventDefault(); stopWarn(event) })
        }
    }
    chessboard = chessboard.reverse()
    for (let i = 0; i < chessboard.length; i++) {
        for (let j = 0; j < chessboard[i].length; j++) {
            chessboard[i][j].style.width = `${2 * u}px`
            chessboard[i][j].style.height = `${2 * u}px`
        }
    }
</script>
